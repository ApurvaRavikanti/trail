using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
 
public static class JsonSanitizer
{
    private static readonly string[] UnwantedWords = new[]
    {
        "<script>", "<iframe>", "<embed>", "<object>",
        ".", "--", ";--", "/*", "*/", "@@",
        "nchar", "varchar", "nvarchar", "exec", "sysobjects", "syscolumns"
    };
 
    public static JToken Sanitize(JToken token)
    {
        switch (token.Type)
        {
            case JTokenType.Object:
                var obj = (JObject)token;
                var sanitizedObj = new JObject();
 
                foreach (var prop in obj.Properties())
                {
                    if (prop.Name.Equals("div", StringComparison.OrdinalIgnoreCase) &&
                        prop.Value.Type == JTokenType.String &&
                        ContainsUnwanted(prop.Value.ToString()))
                    {
                        sanitizedObj[prop.Name] = "";
                    }
                    else
                    {
                        sanitizedObj[prop.Name] = Sanitize(prop.Value);
                    }
                }
 
                return sanitizedObj;
 
            case JTokenType.Array:
                return new JArray(token.Select(Sanitize));
 
            case JTokenType.String:
                return RemoveUnwanted(token.ToString());
 
            default:
                return token;
        }
    }
 
    private static bool ContainsUnwanted(string input) =>
        UnwantedWords.Any(word => input.IndexOf(word, StringComparison.OrdinalIgnoreCase) >= 0);
 
    private static string RemoveUnwanted(string input)
    {
        foreach (var word in UnwantedWords)
        {
            input = Regex.Replace(input, Regex.Escape(word), "", RegexOptions.IgnoreCase);
        }
        return input;
    }
}
